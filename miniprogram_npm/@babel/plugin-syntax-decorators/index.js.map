{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    legacy,\n    version = legacy ? \"legacy\" : \"2018-09\",\n    decoratorsBeforeExport = version === \"2021-12\" ? false : undefined\n  } = options;\n\n  if (version !== \"2021-12\" && version !== \"2018-09\" && version !== \"legacy\") {\n    throw new Error(\"Unsupported decorators version: \" + version);\n  }\n\n  if (legacy !== undefined) {\n    if (typeof legacy !== \"boolean\") {\n      throw new Error(\".legacy must be a boolean.\");\n    }\n\n    if (options.version !== undefined) {\n      throw new Error(\"You can either use the .legacy or the .version option, not both.\");\n    }\n  }\n\n  if (decoratorsBeforeExport === undefined) {\n    if (version === \"2018-09\") {\n      throw new Error(\"The decorators plugin, when .version is '2018-09' or not specified,\" + \" requires a 'decoratorsBeforeExport' option, whose value must be a boolean.\");\n    }\n  } else {\n    if (version === \"legacy\") {\n      throw new Error(\"'decoratorsBeforeExport' can't be used with legacy decorators.\");\n    }\n\n    if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  return {\n    name: \"syntax-decorators\",\n\n    manipulateOptions({\n      generatorOpts\n    }, parserOpts) {\n      if (version === \"legacy\") {\n        parserOpts.plugins.push(\"decorators-legacy\");\n      } else if (version === \"2018-09\") {\n        parserOpts.plugins.push([\"decorators\", {\n          decoratorsBeforeExport\n        }]);\n        generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;\n      } else {\n        parserOpts.plugins.push([\"decorators\", {\n          decoratorsBeforeExport\n        }], \"decoratorAutoAccessors\");\n        generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;\n      }\n    }\n\n  };\n});\n\nexports.default = _default;"]}